
AtmelStartProject0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000002f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111b  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab1  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000787  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000696  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c8  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 00 	call	0xca	; 0xca <main>
  9e:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a6:	0e 94 a3 00 	call	0x146	; 0x146 <system_init>
  aa:	08 95       	ret

000000ac <function1>:
		_delay_ms(1000);
	}
}

void function1(const char *p)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	int i = 0;
	
	for (i= 0;(*p!='\0');i++)
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <function1+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_0_write(*p);
  ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>

void function1(const char *p)
{
	int i = 0;
	
	for (i= 0;(*p!='\0');i++)
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <function1+0xe>
	{
		USART_0_write(*p);
		p++;
	}
	
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <main>:
char var[] = "anurag";

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x14>
  de:	00 00       	nop

	/* Replace with your application code */
	while (1) {
		_delay_ms(50);
		//USART_0_write(0x31);
		USART_0_write('w');
  e0:	87 e7       	ldi	r24, 0x77	; 119
  e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('e');
  e6:	85 e6       	ldi	r24, 0x65	; 101
  e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('l');
  ec:	8c e6       	ldi	r24, 0x6C	; 108
  ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('c');
  f2:	83 e6       	ldi	r24, 0x63	; 99
  f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('o');
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('m');
  fe:	8d e6       	ldi	r24, 0x6D	; 109
 100:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
		USART_0_write('e');
 104:	85 e6       	ldi	r24, 0x65	; 101
 106:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x46>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x50>
 11a:	00 00       	nop
		
		_delay_ms(1000);
		function1(var);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 56 00 	call	0xac	; 0xac <function1>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ed       	ldi	r24, 0xD3	; 211
 128:	90 e3       	ldi	r25, 0x30	; 48
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x60>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x6a>
 134:	00 00       	nop
 136:	cb cf       	rjmp	.-106    	; 0xce <main+0x4>

00000138 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 138:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 13a:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 13c:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 13e:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 140:	0e 94 c7 00 	call	0x18e	; 0x18e <USART_0_init>
 144:	08 95       	ret

00000146 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 146:	8f ee       	ldi	r24, 0xEF	; 239
 148:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 150:	85 b1       	in	r24, 0x05	; 5
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 156:	87 b1       	in	r24, 0x07	; 7
 158:	80 78       	andi	r24, 0x80	; 128
 15a:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	8f 67       	ori	r24, 0x7F	; 127
 160:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	60 e8       	ldi	r22, 0x80	; 128
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 c0 00 	call	0x180	; 0x180 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 176:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 178:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	USART_0_initialization();
 17a:	0e 94 9c 00 	call	0x138	; 0x138 <USART_0_initialization>
 17e:	08 95       	ret

00000180 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 180:	2f b7       	in	r18, 0x3f	; 63
	cli
 182:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 184:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 186:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 188:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 18a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 18c:	08 95       	ret

0000018e <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 18e:	e4 e6       	ldi	r30, 0x64	; 100
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	80 83       	st	Z, r24
 198:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1a6:	88 e9       	ldi	r24, 0x98	; 152
 1a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
 1b4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret

000001bc <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <USART_0_write+0x4>
		;
	UDR0 = data;
 1c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ca:	08 95       	ret

000001cc <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 1cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_0_write>
	return 0;
}
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
